version: '3.8'

services:
  web:
    container_name: lecastelet-api
    build:
      context: .
      dockerfile: Dockerfile
    # -------- replace with comment to run with gunicorn --------
    command: uvicorn app.main:app --host 0.0.0.0 --port ${APP_PORT} --reload
    # command: gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:${APP_PORT}
    environment:
      - APP_PORT=${APP_PORT}
    env_file:
      - ./.env
    # -------- replace with comment if you are using nginx --------
    ports:
      - "${APP_PORT}:${APP_PORT}"
    # expose:
    #   - "8000"
    depends_on:
      mysqldb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src/app:/code/app
      - ./src/tmp:/code/tmp
    networks:
      - lecastelet
      - splunk-net
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 10G
        reservations:
          cpus: '2.0'
          memory: 4G

  # worker:
  #   container_name: lecastelet-worker
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   command: arq app.core.worker.settings.WorkerSettings
  #   env_file:
  #     - ./.env
  #   depends_on:
  #     - mysqldb
  #     - redis
  #   volumes:
  #     - ./src/app:/code/app
  #     - ./.env:/code/.env

  mysqldb:
    image: mysql:latest
    container_name: lecastelet-db
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DB}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    env_file:
      - ./.env
    volumes:
      - mysql-data:/var/lib/mysql
      # - ./.docker/mysql/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d
    expose:
      - "${MYSQL_PORT}"
    ports:
     - "0.0.0.0:${MYSQL_PORT}:3306"
    healthcheck:
      test: mysqladmin ping -h localhost
      interval: 2s
      timeout: 3s
      retries: 40
    networks:
      - lecastelet

  redis:
    container_name: lecastelet-redis
    image: redis:alpine
    volumes:
      - redis-data:/data
    environment:
      - REDIS_QUEUE_PORT=${REDIS_QUEUE_PORT}
    expose:
      - "${REDIS_QUEUE_PORT}"
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 50
    networks:
      - lecastelet

  #-------- uncomment to run with nginx --------
  # nginx:
  #   image: nginx:latest
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./default.conf:/etc/nginx/conf.d/default.conf
  #   depends_on:
  #     - web

  #-------- uncomment to create first superuser --------
  # create_superuser:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ./.env
  #   depends_on:
  #     - db
  #     - web
  #   command: python -m src.scripts.create_first_superuser
  #   volumes:
  #     - ./src:/code/src

  #-------- uncomment to run tests --------
  # pytest:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ./.env
  #   depends_on:
  #     - db
  #     - create_superuser
  #     - redis
  #   command: python -m pytest ./tests
  #   volumes:
  #     - .:/code

  #-------- uncomment to create first tier --------
  # create_tier:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ./.env
  #   depends_on:
  #     - db
  #     - web
  #   command: python -m src.scripts.create_first_tier
  #   volumes:
  #     - ./src:/code/src

volumes:
  mysql-data:
  redis-data:


networks:
  lecastelet:
    driver: bridge
  splunk-net:
    external: true
